// autogenerated by clasp-openvr: do not edit


#include <clasp/core/foundation.h>
#include <clasp/core/common.h>
#include <clasp/clasp.h>
#include <clasp/clbind/clbind.h>
#include <clasp/clbind/details.h>
#include <clasp/clbind/function.h>
#include <clasp/core/numbers.h>
#include <clasp/core/debugger.h>
#include <clasp/core/array.h>
#include <clasp/core/package.h>
#include <clasp/core/translators.h>
#include <clasp/core/cons.h>
#include "openvr.h"
#include <vulkan/vulkan.h>

void startup()
{using namespace clbind;
package("CLASP-OPENVR") [ 
def("VR_Init",&vr::VR_Shutdown,policies<>(),"()"),
def("VR_Shutdown",&vr::VR_Init,policies<>(),"(peError eApplicationType)"),
class_<vr::IVRSystem>("vr::IVRSystem",no_default_constructor)
.def("GetRecommendedRenderTargetSize",&vr::IVRSystem::GetRecommendedRenderTargetSize,policies<>(),"(self pnHeight)")
.def("GetProjectionMatrix",&vr::IVRSystem::GetProjectionMatrix,policies<>(),"(self fNearZ fFarZ)")
.def("GetProjectionRaw",&vr::IVRSystem::GetProjectionRaw,policies<>(),"(self pfLeft pfRight pfTop pfBottom)")
.def("ComputeDistortion",&vr::IVRSystem::ComputeDistortion,policies<>(),"(self fU fV pDistortionCoordinates)")
.def("GetEyeToHeadTransform",&vr::IVRSystem::GetEyeToHeadTransform,policies<>(),"(self )")
.def("GetTimeSinceLastVsync",&vr::IVRSystem::GetTimeSinceLastVsync,policies<>(),"(self pulFrameCounter)")
.def("GetD3D9AdapterIndex",&vr::IVRSystem::GetD3D9AdapterIndex,policies<>(),"(self )")
.def("GetDXGIOutputInfo",&vr::IVRSystem::GetDXGIOutputInfo,policies<>(),"(self )")
.def("GetOutputDevice",&vr::IVRSystem::GetOutputDevice,policies<>(),"(self textureType pInstance)")
.def("IsDisplayOnDesktop",&vr::IVRSystem::IsDisplayOnDesktop,policies<>(),"(self )")
.def("SetDisplayVisibility",&vr::IVRSystem::SetDisplayVisibility,policies<>(),"(self )")
.def("GetDeviceToAbsoluteTrackingPose",&vr::IVRSystem::GetDeviceToAbsoluteTrackingPose,policies<>(),"(self fPredictedSecondsToPhotonsFromNow pTrackedDevicePoseArray unTrackedDevicePoseArrayCount)")
.def("ResetSeatedZeroPose",&vr::IVRSystem::ResetSeatedZeroPose,policies<>(),"(self )")
.def("GetSeatedZeroPoseToStandingAbsoluteTrackingPose",&vr::IVRSystem::GetSeatedZeroPoseToStandingAbsoluteTrackingPose,policies<>(),"(self )")
.def("GetRawZeroPoseToStandingAbsoluteTrackingPose",&vr::IVRSystem::GetRawZeroPoseToStandingAbsoluteTrackingPose,policies<>(),"(self )")
.def("GetSortedTrackedDeviceIndicesOfClass",&vr::IVRSystem::GetSortedTrackedDeviceIndicesOfClass,policies<>(),"(self punTrackedDeviceIndexArray unTrackedDeviceIndexArrayCount unRelativeToTrackedDeviceIndex)")
.def("GetTrackedDeviceActivityLevel",&vr::IVRSystem::GetTrackedDeviceActivityLevel,policies<>(),"(self )")
.def("ApplyTransform",&vr::IVRSystem::ApplyTransform,policies<>(),"(self pTrackedDevicePose pTransform)")
.def("GetTrackedDeviceIndexForControllerRole",&vr::IVRSystem::GetTrackedDeviceIndexForControllerRole,policies<>(),"(self )")
.def("GetControllerRoleForTrackedDeviceIndex",&vr::IVRSystem::GetControllerRoleForTrackedDeviceIndex,policies<>(),"(self )")
.def("GetTrackedDeviceClass",&vr::IVRSystem::GetTrackedDeviceClass,policies<>(),"(self )")
.def("IsTrackedDeviceConnected",&vr::IVRSystem::IsTrackedDeviceConnected,policies<>(),"(self )")
.def("GetBoolTrackedDeviceProperty",&vr::IVRSystem::GetBoolTrackedDeviceProperty,policies<>(),"(self prop pError)")
.def("GetFloatTrackedDeviceProperty",&vr::IVRSystem::GetFloatTrackedDeviceProperty,policies<>(),"(self prop pError)")
.def("GetInt32TrackedDeviceProperty",&vr::IVRSystem::GetInt32TrackedDeviceProperty,policies<>(),"(self prop pError)")
.def("GetUint64TrackedDeviceProperty",&vr::IVRSystem::GetUint64TrackedDeviceProperty,policies<>(),"(self prop pError)")
.def("GetMatrix34TrackedDeviceProperty",&vr::IVRSystem::GetMatrix34TrackedDeviceProperty,policies<>(),"(self prop pError)")
.def("GetArrayTrackedDeviceProperty",&vr::IVRSystem::GetArrayTrackedDeviceProperty,policies<>(),"(self prop propType pBuffer unBufferSize pError)")
.def("GetStringTrackedDeviceProperty",&vr::IVRSystem::GetStringTrackedDeviceProperty,policies<>(),"(self prop pchValue unBufferSize pError)")
.def("GetPropErrorNameFromEnum",&vr::IVRSystem::GetPropErrorNameFromEnum,policies<>(),"(self )")
.def("PollNextEvent",&vr::IVRSystem::PollNextEvent,policies<>(),"(self uncbVREvent)")
.def("PollNextEventWithPose",&vr::IVRSystem::PollNextEventWithPose,policies<>(),"(self pEvent uncbVREvent pTrackedDevicePose)")
.def("GetEventTypeNameFromEnum",&vr::IVRSystem::GetEventTypeNameFromEnum,policies<>(),"(self )")
.def("GetHiddenAreaMesh",&vr::IVRSystem::GetHiddenAreaMesh,policies<>(),"(self type)")
.def("GetControllerState",&vr::IVRSystem::GetControllerState,policies<>(),"(self pControllerState unControllerStateSize)")
.def("GetControllerStateWithPose",&vr::IVRSystem::GetControllerStateWithPose,policies<>(),"(self unControllerDeviceIndex pControllerState unControllerStateSize pTrackedDevicePose)")
.def("TriggerHapticPulse",&vr::IVRSystem::TriggerHapticPulse,policies<>(),"(self unAxisId usDurationMicroSec)")
.def("GetButtonIdNameFromEnum",&vr::IVRSystem::GetButtonIdNameFromEnum,policies<>(),"(self )")
.def("GetControllerAxisTypeNameFromEnum",&vr::IVRSystem::GetControllerAxisTypeNameFromEnum,policies<>(),"(self )")
.def("IsInputAvailable",&vr::IVRSystem::IsInputAvailable,policies<>(),"(self )")
.def("IsSteamVRDrawingControllers",&vr::IVRSystem::IsSteamVRDrawingControllers,policies<>(),"(self )")
.def("ShouldApplicationPause",&vr::IVRSystem::ShouldApplicationPause,policies<>(),"(self )")
.def("ShouldApplicationReduceRenderingWork",&vr::IVRSystem::ShouldApplicationReduceRenderingWork,policies<>(),"(self )")
.def("DriverDebugRequest",&vr::IVRSystem::DriverDebugRequest,policies<>(),"(self pchRequest pchResponseBuffer unResponseBufferSize)")
.def("PerformFirmwareUpdate",&vr::IVRSystem::PerformFirmwareUpdate,policies<>(),"(self )")
.def("AcknowledgeQuit_Exiting",&vr::IVRSystem::AcknowledgeQuit_Exiting,policies<>(),"(self )")
.def("AcknowledgeQuit_UserPrompt",&vr::IVRSystem::AcknowledgeQuit_UserPrompt,policies<>(),"(self )")
,class_<vr::IVRExtendedDisplay>("vr::IVRExtendedDisplay",no_default_constructor)
.def("GetWindowBounds",&vr::IVRExtendedDisplay::GetWindowBounds,policies<>(),"(self pnY pnWidth pnHeight)")
.def("GetEyeOutputViewport",&vr::IVRExtendedDisplay::GetEyeOutputViewport,policies<>(),"(self pnX pnY pnWidth pnHeight)")
.def("GetDXGIOutputInfo",&vr::IVRExtendedDisplay::GetDXGIOutputInfo,policies<>(),"(self pnAdapterOutputIndex)")
,class_<vr::IVRTrackedCamera>("vr::IVRTrackedCamera",no_default_constructor)
.def("GetCameraErrorNameFromEnum",&vr::IVRTrackedCamera::GetCameraErrorNameFromEnum,policies<>(),"(self )")
.def("HasCamera",&vr::IVRTrackedCamera::HasCamera,policies<>(),"(self pHasCamera)")
.def("GetCameraFrameSize",&vr::IVRTrackedCamera::GetCameraFrameSize,policies<>(),"(self eFrameType pnWidth pnHeight pnFrameBufferSize)")
.def("GetCameraIntrinsics",&vr::IVRTrackedCamera::GetCameraIntrinsics,policies<>(),"(self nCameraIndex eFrameType pFocalLength pCenter)")
.def("GetCameraProjection",&vr::IVRTrackedCamera::GetCameraProjection,policies<>(),"(self nCameraIndex eFrameType flZNear flZFar pProjection)")
.def("AcquireVideoStreamingService",&vr::IVRTrackedCamera::AcquireVideoStreamingService,policies<>(),"(self pHandle)")
.def("ReleaseVideoStreamingService",&vr::IVRTrackedCamera::ReleaseVideoStreamingService,policies<>(),"(self )")
.def("GetVideoStreamFrameBuffer",&vr::IVRTrackedCamera::GetVideoStreamFrameBuffer,policies<>(),"(self eFrameType pFrameBuffer nFrameBufferSize pFrameHeader nFrameHeaderSize)")
.def("GetVideoStreamTextureSize",&vr::IVRTrackedCamera::GetVideoStreamTextureSize,policies<>(),"(self eFrameType pTextureBounds pnWidth pnHeight)")
.def("GetVideoStreamTextureD3D11",&vr::IVRTrackedCamera::GetVideoStreamTextureD3D11,policies<>(),"(self eFrameType pD3D11DeviceOrResource ppD3D11ShaderResourceView pFrameHeader nFrameHeaderSize)")
.def("GetVideoStreamTextureGL",&vr::IVRTrackedCamera::GetVideoStreamTextureGL,policies<>(),"(self eFrameType pglTextureId pFrameHeader nFrameHeaderSize)")
.def("ReleaseVideoStreamTextureGL",&vr::IVRTrackedCamera::ReleaseVideoStreamTextureGL,policies<>(),"(self glTextureId)")
,class_<vr::IVRApplications>("vr::IVRApplications",no_default_constructor)
.def("AddApplicationManifest",&vr::IVRApplications::AddApplicationManifest,policies<>(),"(self bTemporary)")
.def("RemoveApplicationManifest",&vr::IVRApplications::RemoveApplicationManifest,policies<>(),"(self )")
.def("IsApplicationInstalled",&vr::IVRApplications::IsApplicationInstalled,policies<>(),"(self )")
.def("GetApplicationCount",&vr::IVRApplications::GetApplicationCount,policies<>(),"(self )")
.def("GetApplicationKeyByIndex",&vr::IVRApplications::GetApplicationKeyByIndex,policies<>(),"(self pchAppKeyBuffer unAppKeyBufferLen)")
.def("GetApplicationKeyByProcessId",&vr::IVRApplications::GetApplicationKeyByProcessId,policies<>(),"(self pchAppKeyBuffer unAppKeyBufferLen)")
.def("LaunchApplication",&vr::IVRApplications::LaunchApplication,policies<>(),"(self )")
.def("LaunchTemplateApplication",&vr::IVRApplications::LaunchTemplateApplication,policies<>(),"(self pchNewAppKey pKeys unKeys)")
.def("LaunchApplicationFromMimeType",&vr::IVRApplications::LaunchApplicationFromMimeType,policies<>(),"(self pchArgs)")
.def("LaunchDashboardOverlay",&vr::IVRApplications::LaunchDashboardOverlay,policies<>(),"(self )")
.def("CancelApplicationLaunch",&vr::IVRApplications::CancelApplicationLaunch,policies<>(),"(self )")
.def("IdentifyApplication",&vr::IVRApplications::IdentifyApplication,policies<>(),"(self pchAppKey)")
.def("GetApplicationProcessId",&vr::IVRApplications::GetApplicationProcessId,policies<>(),"(self )")
.def("GetApplicationsErrorNameFromEnum",&vr::IVRApplications::GetApplicationsErrorNameFromEnum,policies<>(),"(self )")
.def("GetApplicationPropertyString",&vr::IVRApplications::GetApplicationPropertyString,policies<>(),"(self eProperty pchPropertyValueBuffer unPropertyValueBufferLen peError)")
.def("GetApplicationPropertyBool",&vr::IVRApplications::GetApplicationPropertyBool,policies<>(),"(self eProperty peError)")
.def("GetApplicationPropertyUint64",&vr::IVRApplications::GetApplicationPropertyUint64,policies<>(),"(self eProperty peError)")
.def("SetApplicationAutoLaunch",&vr::IVRApplications::SetApplicationAutoLaunch,policies<>(),"(self bAutoLaunch)")
.def("GetApplicationAutoLaunch",&vr::IVRApplications::GetApplicationAutoLaunch,policies<>(),"(self )")
.def("SetDefaultApplicationForMimeType",&vr::IVRApplications::SetDefaultApplicationForMimeType,policies<>(),"(self pchMimeType)")
.def("GetDefaultApplicationForMimeType",&vr::IVRApplications::GetDefaultApplicationForMimeType,policies<>(),"(self pchAppKeyBuffer unAppKeyBufferLen)")
.def("GetApplicationSupportedMimeTypes",&vr::IVRApplications::GetApplicationSupportedMimeTypes,policies<>(),"(self pchMimeTypesBuffer unMimeTypesBuffer)")
.def("GetApplicationsThatSupportMimeType",&vr::IVRApplications::GetApplicationsThatSupportMimeType,policies<>(),"(self pchAppKeysThatSupportBuffer unAppKeysThatSupportBuffer)")
.def("GetApplicationLaunchArguments",&vr::IVRApplications::GetApplicationLaunchArguments,policies<>(),"(self pchArgs unArgs)")
.def("GetStartingApplication",&vr::IVRApplications::GetStartingApplication,policies<>(),"(self unAppKeyBufferLen)")
.def("GetTransitionState",&vr::IVRApplications::GetTransitionState,policies<>(),"(self )")
.def("PerformApplicationPrelaunchCheck",&vr::IVRApplications::PerformApplicationPrelaunchCheck,policies<>(),"(self )")
.def("GetApplicationsTransitionStateNameFromEnum",&vr::IVRApplications::GetApplicationsTransitionStateNameFromEnum,policies<>(),"(self )")
.def("IsQuitUserPromptRequested",&vr::IVRApplications::IsQuitUserPromptRequested,policies<>(),"(self )")
.def("LaunchInternalProcess",&vr::IVRApplications::LaunchInternalProcess,policies<>(),"(self pchArguments pchWorkingDirectory)")
.def("GetCurrentSceneProcessId",&vr::IVRApplications::GetCurrentSceneProcessId,policies<>(),"(self )")
,class_<vr::IVRChaperone>("vr::IVRChaperone",no_default_constructor)
.def("GetCalibrationState",&vr::IVRChaperone::GetCalibrationState,policies<>(),"(self )")
.def("GetPlayAreaSize",&vr::IVRChaperone::GetPlayAreaSize,policies<>(),"(self pSizeZ)")
.def("GetPlayAreaRect",&vr::IVRChaperone::GetPlayAreaRect,policies<>(),"(self )")
.def("ReloadInfo",&vr::IVRChaperone::ReloadInfo,policies<>(),"(self )")
.def("SetSceneColor",&vr::IVRChaperone::SetSceneColor,policies<>(),"(self )")
.def("GetBoundsColor",&vr::IVRChaperone::GetBoundsColor,policies<>(),"(self nNumOutputColors flCollisionBoundsFadeDistance pOutputCameraColor)")
.def("AreBoundsVisible",&vr::IVRChaperone::AreBoundsVisible,policies<>(),"(self )")
.def("ForceBoundsVisible",&vr::IVRChaperone::ForceBoundsVisible,policies<>(),"(self )")
,class_<vr::IVRChaperoneSetup>("vr::IVRChaperoneSetup",no_default_constructor)
.def("CommitWorkingCopy",&vr::IVRChaperoneSetup::CommitWorkingCopy,policies<>(),"(self )")
.def("RevertWorkingCopy",&vr::IVRChaperoneSetup::RevertWorkingCopy,policies<>(),"(self )")
.def("GetWorkingPlayAreaSize",&vr::IVRChaperoneSetup::GetWorkingPlayAreaSize,policies<>(),"(self pSizeZ)")
.def("GetWorkingPlayAreaRect",&vr::IVRChaperoneSetup::GetWorkingPlayAreaRect,policies<>(),"(self )")
.def("GetWorkingCollisionBoundsInfo",&vr::IVRChaperoneSetup::GetWorkingCollisionBoundsInfo,policies<>(),"(self punQuadsCount)")
.def("GetLiveCollisionBoundsInfo",&vr::IVRChaperoneSetup::GetLiveCollisionBoundsInfo,policies<>(),"(self punQuadsCount)")
.def("GetWorkingSeatedZeroPoseToRawTrackingPose",&vr::IVRChaperoneSetup::GetWorkingSeatedZeroPoseToRawTrackingPose,policies<>(),"(self )")
.def("GetWorkingStandingZeroPoseToRawTrackingPose",&vr::IVRChaperoneSetup::GetWorkingStandingZeroPoseToRawTrackingPose,policies<>(),"(self )")
.def("SetWorkingPlayAreaSize",&vr::IVRChaperoneSetup::SetWorkingPlayAreaSize,policies<>(),"(self sizeZ)")
.def("SetWorkingCollisionBoundsInfo",&vr::IVRChaperoneSetup::SetWorkingCollisionBoundsInfo,policies<>(),"(self unQuadsCount)")
.def("SetWorkingPerimeter",&vr::IVRChaperoneSetup::SetWorkingPerimeter,policies<>(),"(self unPointCount)")
.def("SetWorkingSeatedZeroPoseToRawTrackingPose",&vr::IVRChaperoneSetup::SetWorkingSeatedZeroPoseToRawTrackingPose,policies<>(),"(self )")
.def("SetWorkingStandingZeroPoseToRawTrackingPose",&vr::IVRChaperoneSetup::SetWorkingStandingZeroPoseToRawTrackingPose,policies<>(),"(self )")
.def("ReloadFromDisk",&vr::IVRChaperoneSetup::ReloadFromDisk,policies<>(),"(self )")
.def("GetLiveSeatedZeroPoseToRawTrackingPose",&vr::IVRChaperoneSetup::GetLiveSeatedZeroPoseToRawTrackingPose,policies<>(),"(self )")
.def("ExportLiveToBuffer",&vr::IVRChaperoneSetup::ExportLiveToBuffer,policies<>(),"(self pnBufferLength)")
.def("ImportFromBufferToWorking",&vr::IVRChaperoneSetup::ImportFromBufferToWorking,policies<>(),"(self nImportFlags)")
.def("ShowWorkingSetPreview",&vr::IVRChaperoneSetup::ShowWorkingSetPreview,policies<>(),"(self )")
.def("HideWorkingSetPreview",&vr::IVRChaperoneSetup::HideWorkingSetPreview,policies<>(),"(self )")
,class_<vr::IVRCompositor>("vr::IVRCompositor",no_default_constructor)
.def("SetTrackingSpace",&vr::IVRCompositor::SetTrackingSpace,policies<>(),"(self )")
.def("GetTrackingSpace",&vr::IVRCompositor::GetTrackingSpace,policies<>(),"(self )")
.def("WaitGetPoses",&vr::IVRCompositor::WaitGetPoses,policies<>(),"(self unRenderPoseArrayCount pGamePoseArray unGamePoseArrayCount)")
.def("GetLastPoses",&vr::IVRCompositor::GetLastPoses,policies<>(),"(self unRenderPoseArrayCount pGamePoseArray unGamePoseArrayCount)")
.def("GetLastPoseForTrackedDeviceIndex",&vr::IVRCompositor::GetLastPoseForTrackedDeviceIndex,policies<>(),"(self pOutputPose pOutputGamePose)")
.def("Submit",&vr::IVRCompositor::Submit,policies<>(),"(self pTexture pBounds nSubmitFlags)")
.def("ClearLastSubmittedFrame",&vr::IVRCompositor::ClearLastSubmittedFrame,policies<>(),"(self )")
.def("PostPresentHandoff",&vr::IVRCompositor::PostPresentHandoff,policies<>(),"(self )")
.def("GetFrameTiming",&vr::IVRCompositor::GetFrameTiming,policies<>(),"(self unFramesAgo)")
.def("GetFrameTimings",&vr::IVRCompositor::GetFrameTimings,policies<>(),"(self nFrames)")
.def("GetFrameTimeRemaining",&vr::IVRCompositor::GetFrameTimeRemaining,policies<>(),"(self )")
.def("GetCumulativeStats",&vr::IVRCompositor::GetCumulativeStats,policies<>(),"(self nStatsSizeInBytes)")
.def("FadeToColor",&vr::IVRCompositor::FadeToColor,policies<>(),"(self fRed fGreen fBlue fAlpha bBackground)")
.def("GetCurrentFadeColor",&vr::IVRCompositor::GetCurrentFadeColor,policies<>(),"(self )")
.def("FadeGrid",&vr::IVRCompositor::FadeGrid,policies<>(),"(self bFadeIn)")
.def("GetCurrentGridAlpha",&vr::IVRCompositor::GetCurrentGridAlpha,policies<>(),"(self )")
.def("SetSkyboxOverride",&vr::IVRCompositor::SetSkyboxOverride,policies<>(),"(self unTextureCount)")
.def("ClearSkyboxOverride",&vr::IVRCompositor::ClearSkyboxOverride,policies<>(),"(self )")
.def("CompositorBringToFront",&vr::IVRCompositor::CompositorBringToFront,policies<>(),"(self )")
.def("CompositorGoToBack",&vr::IVRCompositor::CompositorGoToBack,policies<>(),"(self )")
.def("CompositorQuit",&vr::IVRCompositor::CompositorQuit,policies<>(),"(self )")
.def("IsFullscreen",&vr::IVRCompositor::IsFullscreen,policies<>(),"(self )")
.def("GetCurrentSceneFocusProcess",&vr::IVRCompositor::GetCurrentSceneFocusProcess,policies<>(),"(self )")
.def("GetLastFrameRenderer",&vr::IVRCompositor::GetLastFrameRenderer,policies<>(),"(self )")
.def("CanRenderScene",&vr::IVRCompositor::CanRenderScene,policies<>(),"(self )")
.def("ShowMirrorWindow",&vr::IVRCompositor::ShowMirrorWindow,policies<>(),"(self )")
.def("HideMirrorWindow",&vr::IVRCompositor::HideMirrorWindow,policies<>(),"(self )")
.def("IsMirrorWindowVisible",&vr::IVRCompositor::IsMirrorWindowVisible,policies<>(),"(self )")
.def("CompositorDumpImages",&vr::IVRCompositor::CompositorDumpImages,policies<>(),"(self )")
.def("ShouldAppRenderWithLowResources",&vr::IVRCompositor::ShouldAppRenderWithLowResources,policies<>(),"(self )")
.def("ForceInterleavedReprojectionOn",&vr::IVRCompositor::ForceInterleavedReprojectionOn,policies<>(),"(self )")
.def("ForceReconnectProcess",&vr::IVRCompositor::ForceReconnectProcess,policies<>(),"(self )")
.def("SuspendRendering",&vr::IVRCompositor::SuspendRendering,policies<>(),"(self )")
.def("GetMirrorTextureD3D11",&vr::IVRCompositor::GetMirrorTextureD3D11,policies<>(),"(self pD3D11DeviceOrResource ppD3D11ShaderResourceView)")
.def("ReleaseMirrorTextureD3D11",&vr::IVRCompositor::ReleaseMirrorTextureD3D11,policies<>(),"(self )")
.def("GetMirrorTextureGL",&vr::IVRCompositor::GetMirrorTextureGL,policies<>(),"(self pglTextureId pglSharedTextureHandle)")
.def("ReleaseSharedGLTexture",&vr::IVRCompositor::ReleaseSharedGLTexture,policies<>(),"(self glSharedTextureHandle)")
.def("LockGLSharedTextureForAccess",&vr::IVRCompositor::LockGLSharedTextureForAccess,policies<>(),"(self )")
.def("UnlockGLSharedTextureForAccess",&vr::IVRCompositor::UnlockGLSharedTextureForAccess,policies<>(),"(self )")
.def("GetVulkanInstanceExtensionsRequired",&vr::IVRCompositor::GetVulkanInstanceExtensionsRequired,policies<>(),"(self unBufferSize)")
.def("GetVulkanDeviceExtensionsRequired",&vr::IVRCompositor::GetVulkanDeviceExtensionsRequired,policies<>(),"(self pchValue unBufferSize)")
.def("SetExplicitTimingMode",&vr::IVRCompositor::SetExplicitTimingMode,policies<>(),"(self )")
.def("SubmitExplicitTimingData",&vr::IVRCompositor::SubmitExplicitTimingData,policies<>(),"(self )")
.def("IsMotionSmoothingEnabled",&vr::IVRCompositor::IsMotionSmoothingEnabled,policies<>(),"(self )")
,class_<vr::IVROverlay>("vr::IVROverlay",no_default_constructor)
.def("FindOverlay",&vr::IVROverlay::FindOverlay,policies<>(),"(self pOverlayHandle)")
.def("CreateOverlay",&vr::IVROverlay::CreateOverlay,policies<>(),"(self pchOverlayName pOverlayHandle)")
.def("DestroyOverlay",&vr::IVROverlay::DestroyOverlay,policies<>(),"(self )")
.def("SetHighQualityOverlay",&vr::IVROverlay::SetHighQualityOverlay,policies<>(),"(self )")
.def("GetHighQualityOverlay",&vr::IVROverlay::GetHighQualityOverlay,policies<>(),"(self )")
.def("GetOverlayKey",&vr::IVROverlay::GetOverlayKey,policies<>(),"(self pchValue unBufferSize pError)")
.def("GetOverlayName",&vr::IVROverlay::GetOverlayName,policies<>(),"(self pchValue unBufferSize pError)")
.def("SetOverlayName",&vr::IVROverlay::SetOverlayName,policies<>(),"(self pchName)")
.def("GetOverlayImageData",&vr::IVROverlay::GetOverlayImageData,policies<>(),"(self pvBuffer unBufferSize punWidth punHeight)")
.def("GetOverlayErrorNameFromEnum",&vr::IVROverlay::GetOverlayErrorNameFromEnum,policies<>(),"(self )")
.def("SetOverlayRenderingPid",&vr::IVROverlay::SetOverlayRenderingPid,policies<>(),"(self unPID)")
.def("GetOverlayRenderingPid",&vr::IVROverlay::GetOverlayRenderingPid,policies<>(),"(self )")
.def("SetOverlayFlag",&vr::IVROverlay::SetOverlayFlag,policies<>(),"(self eOverlayFlag bEnabled)")
.def("GetOverlayFlag",&vr::IVROverlay::GetOverlayFlag,policies<>(),"(self eOverlayFlag pbEnabled)")
.def("SetOverlayColor",&vr::IVROverlay::SetOverlayColor,policies<>(),"(self fRed fGreen fBlue)")
.def("GetOverlayColor",&vr::IVROverlay::GetOverlayColor,policies<>(),"(self pfRed pfGreen pfBlue)")
.def("SetOverlayAlpha",&vr::IVROverlay::SetOverlayAlpha,policies<>(),"(self fAlpha)")
.def("GetOverlayAlpha",&vr::IVROverlay::GetOverlayAlpha,policies<>(),"(self pfAlpha)")
.def("SetOverlayTexelAspect",&vr::IVROverlay::SetOverlayTexelAspect,policies<>(),"(self fTexelAspect)")
.def("GetOverlayTexelAspect",&vr::IVROverlay::GetOverlayTexelAspect,policies<>(),"(self pfTexelAspect)")
.def("SetOverlaySortOrder",&vr::IVROverlay::SetOverlaySortOrder,policies<>(),"(self unSortOrder)")
.def("GetOverlaySortOrder",&vr::IVROverlay::GetOverlaySortOrder,policies<>(),"(self punSortOrder)")
.def("SetOverlayWidthInMeters",&vr::IVROverlay::SetOverlayWidthInMeters,policies<>(),"(self fWidthInMeters)")
.def("GetOverlayWidthInMeters",&vr::IVROverlay::GetOverlayWidthInMeters,policies<>(),"(self pfWidthInMeters)")
.def("SetOverlayAutoCurveDistanceRangeInMeters",&vr::IVROverlay::SetOverlayAutoCurveDistanceRangeInMeters,policies<>(),"(self fMinDistanceInMeters fMaxDistanceInMeters)")
.def("GetOverlayAutoCurveDistanceRangeInMeters",&vr::IVROverlay::GetOverlayAutoCurveDistanceRangeInMeters,policies<>(),"(self pfMinDistanceInMeters pfMaxDistanceInMeters)")
.def("SetOverlayTextureColorSpace",&vr::IVROverlay::SetOverlayTextureColorSpace,policies<>(),"(self eTextureColorSpace)")
.def("GetOverlayTextureColorSpace",&vr::IVROverlay::GetOverlayTextureColorSpace,policies<>(),"(self peTextureColorSpace)")
.def("SetOverlayTextureBounds",&vr::IVROverlay::SetOverlayTextureBounds,policies<>(),"(self pOverlayTextureBounds)")
.def("GetOverlayTextureBounds",&vr::IVROverlay::GetOverlayTextureBounds,policies<>(),"(self pOverlayTextureBounds)")
.def("GetOverlayRenderModel",&vr::IVROverlay::GetOverlayRenderModel,policies<>(),"(self pchValue unBufferSize pColor pError)")
.def("SetOverlayRenderModel",&vr::IVROverlay::SetOverlayRenderModel,policies<>(),"(self pchRenderModel pColor)")
.def("GetOverlayTransformType",&vr::IVROverlay::GetOverlayTransformType,policies<>(),"(self peTransformType)")
.def("SetOverlayTransformAbsolute",&vr::IVROverlay::SetOverlayTransformAbsolute,policies<>(),"(self eTrackingOrigin pmatTrackingOriginToOverlayTransform)")
.def("GetOverlayTransformAbsolute",&vr::IVROverlay::GetOverlayTransformAbsolute,policies<>(),"(self peTrackingOrigin pmatTrackingOriginToOverlayTransform)")
.def("SetOverlayTransformTrackedDeviceRelative",&vr::IVROverlay::SetOverlayTransformTrackedDeviceRelative,policies<>(),"(self unTrackedDevice pmatTrackedDeviceToOverlayTransform)")
.def("GetOverlayTransformTrackedDeviceRelative",&vr::IVROverlay::GetOverlayTransformTrackedDeviceRelative,policies<>(),"(self punTrackedDevice pmatTrackedDeviceToOverlayTransform)")
.def("SetOverlayTransformTrackedDeviceComponent",&vr::IVROverlay::SetOverlayTransformTrackedDeviceComponent,policies<>(),"(self unDeviceIndex pchComponentName)")
.def("GetOverlayTransformTrackedDeviceComponent",&vr::IVROverlay::GetOverlayTransformTrackedDeviceComponent,policies<>(),"(self punDeviceIndex pchComponentName unComponentNameSize)")
.def("GetOverlayTransformOverlayRelative",&vr::IVROverlay::GetOverlayTransformOverlayRelative,policies<>(),"(self ulOverlayHandleParent pmatParentOverlayToOverlayTransform)")
.def("SetOverlayTransformOverlayRelative",&vr::IVROverlay::SetOverlayTransformOverlayRelative,policies<>(),"(self ulOverlayHandleParent pmatParentOverlayToOverlayTransform)")
.def("ShowOverlay",&vr::IVROverlay::ShowOverlay,policies<>(),"(self )")
.def("HideOverlay",&vr::IVROverlay::HideOverlay,policies<>(),"(self )")
.def("IsOverlayVisible",&vr::IVROverlay::IsOverlayVisible,policies<>(),"(self )")
.def("GetTransformForOverlayCoordinates",&vr::IVROverlay::GetTransformForOverlayCoordinates,policies<>(),"(self eTrackingOrigin coordinatesInOverlay pmatTransform)")
.def("PollNextOverlayEvent",&vr::IVROverlay::PollNextOverlayEvent,policies<>(),"(self pEvent uncbVREvent)")
.def("GetOverlayInputMethod",&vr::IVROverlay::GetOverlayInputMethod,policies<>(),"(self peInputMethod)")
.def("SetOverlayInputMethod",&vr::IVROverlay::SetOverlayInputMethod,policies<>(),"(self eInputMethod)")
.def("GetOverlayMouseScale",&vr::IVROverlay::GetOverlayMouseScale,policies<>(),"(self pvecMouseScale)")
.def("SetOverlayMouseScale",&vr::IVROverlay::SetOverlayMouseScale,policies<>(),"(self pvecMouseScale)")
.def("ComputeOverlayIntersection",&vr::IVROverlay::ComputeOverlayIntersection,policies<>(),"(self pParams pResults)")
.def("IsHoverTargetOverlay",&vr::IVROverlay::IsHoverTargetOverlay,policies<>(),"(self )")
.def("GetGamepadFocusOverlay",&vr::IVROverlay::GetGamepadFocusOverlay,policies<>(),"(self )")
.def("SetGamepadFocusOverlay",&vr::IVROverlay::SetGamepadFocusOverlay,policies<>(),"(self )")
.def("SetOverlayNeighbor",&vr::IVROverlay::SetOverlayNeighbor,policies<>(),"(self ulFrom ulTo)")
.def("MoveGamepadFocusToNeighbor",&vr::IVROverlay::MoveGamepadFocusToNeighbor,policies<>(),"(self ulFrom)")
.def("SetOverlayDualAnalogTransform",&vr::IVROverlay::SetOverlayDualAnalogTransform,policies<>(),"(self eWhich pvCenter fRadius)")
.def("GetOverlayDualAnalogTransform",&vr::IVROverlay::GetOverlayDualAnalogTransform,policies<>(),"(self eWhich pvCenter pfRadius)")
.def("SetOverlayTexture",&vr::IVROverlay::SetOverlayTexture,policies<>(),"(self pTexture)")
.def("ClearOverlayTexture",&vr::IVROverlay::ClearOverlayTexture,policies<>(),"(self )")
.def("SetOverlayRaw",&vr::IVROverlay::SetOverlayRaw,policies<>(),"(self pvBuffer unWidth unHeight unDepth)")
.def("SetOverlayFromFile",&vr::IVROverlay::SetOverlayFromFile,policies<>(),"(self pchFilePath)")
.def("GetOverlayTexture",&vr::IVROverlay::GetOverlayTexture,policies<>(),"(self pNativeTextureHandle pNativeTextureRef pWidth pHeight pNativeFormat pAPIType pColorSpace pTextureBounds)")
.def("ReleaseNativeOverlayHandle",&vr::IVROverlay::ReleaseNativeOverlayHandle,policies<>(),"(self pNativeTextureHandle)")
.def("GetOverlayTextureSize",&vr::IVROverlay::GetOverlayTextureSize,policies<>(),"(self pWidth pHeight)")
.def("CreateDashboardOverlay",&vr::IVROverlay::CreateDashboardOverlay,policies<>(),"(self pchOverlayFriendlyName pMainHandle pThumbnailHandle)")
.def("IsDashboardVisible",&vr::IVROverlay::IsDashboardVisible,policies<>(),"(self )")
.def("IsActiveDashboardOverlay",&vr::IVROverlay::IsActiveDashboardOverlay,policies<>(),"(self )")
.def("SetDashboardOverlaySceneProcess",&vr::IVROverlay::SetDashboardOverlaySceneProcess,policies<>(),"(self unProcessId)")
.def("GetDashboardOverlaySceneProcess",&vr::IVROverlay::GetDashboardOverlaySceneProcess,policies<>(),"(self punProcessId)")
.def("ShowDashboard",&vr::IVROverlay::ShowDashboard,policies<>(),"(self )")
.def("GetPrimaryDashboardDevice",&vr::IVROverlay::GetPrimaryDashboardDevice,policies<>(),"(self )")
.def("ShowKeyboard",&vr::IVROverlay::ShowKeyboard,policies<>(),"(self eLineInputMode pchDescription unCharMax pchExistingText bUseMinimalMode uUserValue)")
.def("ShowKeyboardForOverlay",&vr::IVROverlay::ShowKeyboardForOverlay,policies<>(),"(self eInputMode eLineInputMode pchDescription unCharMax pchExistingText bUseMinimalMode uUserValue)")
.def("GetKeyboardText",&vr::IVROverlay::GetKeyboardText,policies<>(),"(self cchText)")
.def("HideKeyboard",&vr::IVROverlay::HideKeyboard,policies<>(),"(self )")
.def("SetKeyboardTransformAbsolute",&vr::IVROverlay::SetKeyboardTransformAbsolute,policies<>(),"(self pmatTrackingOriginToKeyboardTransform)")
.def("SetKeyboardPositionForOverlay",&vr::IVROverlay::SetKeyboardPositionForOverlay,policies<>(),"(self avoidRect)")
.def("SetOverlayIntersectionMask",&vr::IVROverlay::SetOverlayIntersectionMask,policies<>(),"(self pMaskPrimitives unNumMaskPrimitives unPrimitiveSize)")
.def("GetOverlayFlags",&vr::IVROverlay::GetOverlayFlags,policies<>(),"(self pFlags)")
.def("ShowMessageOverlay",&vr::IVROverlay::ShowMessageOverlay,policies<>(),"(self pchCaption pchButton0Text pchButton1Text pchButton2Text pchButton3Text)")
.def("CloseMessageOverlay",&vr::IVROverlay::CloseMessageOverlay,policies<>(),"(self )")
,class_<vr::IVRRenderModels>("vr::IVRRenderModels",no_default_constructor)
.def("LoadRenderModel_Async",&vr::IVRRenderModels::LoadRenderModel_Async,policies<>(),"(self ppRenderModel)")
.def("FreeRenderModel",&vr::IVRRenderModels::FreeRenderModel,policies<>(),"(self )")
.def("LoadTexture_Async",&vr::IVRRenderModels::LoadTexture_Async,policies<>(),"(self ppTexture)")
.def("FreeTexture",&vr::IVRRenderModels::FreeTexture,policies<>(),"(self )")
.def("LoadTextureD3D11_Async",&vr::IVRRenderModels::LoadTextureD3D11_Async,policies<>(),"(self pD3D11Device ppD3D11Texture2D)")
.def("LoadIntoTextureD3D11_Async",&vr::IVRRenderModels::LoadIntoTextureD3D11_Async,policies<>(),"(self pDstTexture)")
.def("FreeTextureD3D11",&vr::IVRRenderModels::FreeTextureD3D11,policies<>(),"(self )")
.def("GetRenderModelName",&vr::IVRRenderModels::GetRenderModelName,policies<>(),"(self pchRenderModelName unRenderModelNameLen)")
.def("GetRenderModelCount",&vr::IVRRenderModels::GetRenderModelCount,policies<>(),"(self )")
.def("GetComponentCount",&vr::IVRRenderModels::GetComponentCount,policies<>(),"(self )")
.def("GetComponentName",&vr::IVRRenderModels::GetComponentName,policies<>(),"(self unComponentIndex pchComponentName unComponentNameLen)")
.def("GetComponentButtonMask",&vr::IVRRenderModels::GetComponentButtonMask,policies<>(),"(self pchComponentName)")
.def("GetComponentRenderModelName",&vr::IVRRenderModels::GetComponentRenderModelName,policies<>(),"(self pchComponentName pchComponentRenderModelName unComponentRenderModelNameLen)")
.def("GetComponentStateForDevicePath",&vr::IVRRenderModels::GetComponentStateForDevicePath,policies<>(),"(self pchComponentName devicePath pState pComponentState)")
.def("GetComponentState",&vr::IVRRenderModels::GetComponentState,policies<>(),"(self pchComponentName pControllerState pState pComponentState)")
.def("RenderModelHasComponent",&vr::IVRRenderModels::RenderModelHasComponent,policies<>(),"(self pchComponentName)")
.def("GetRenderModelThumbnailURL",&vr::IVRRenderModels::GetRenderModelThumbnailURL,policies<>(),"(self pchThumbnailURL unThumbnailURLLen peError)")
.def("GetRenderModelOriginalPath",&vr::IVRRenderModels::GetRenderModelOriginalPath,policies<>(),"(self pchOriginalPath unOriginalPathLen peError)")
.def("GetRenderModelErrorNameFromEnum",&vr::IVRRenderModels::GetRenderModelErrorNameFromEnum,policies<>(),"(self )")
,class_<vr::IVRNotifications>("vr::IVRNotifications",no_default_constructor)
.def("CreateNotification",&vr::IVRNotifications::CreateNotification,policies<>(),"(self ulUserValue type pchText style pImage pNotificationId)")
.def("RemoveNotification",&vr::IVRNotifications::RemoveNotification,policies<>(),"(self )")
,class_<vr::IVRSettings>("vr::IVRSettings",no_default_constructor)
.def("GetSettingsErrorNameFromEnum",&vr::IVRSettings::GetSettingsErrorNameFromEnum,policies<>(),"(self )")
.def("Sync",&vr::IVRSettings::Sync,policies<>(),"(self peError)")
.def("SetBool",&vr::IVRSettings::SetBool,policies<>(),"(self pchSettingsKey bValue peError)")
.def("SetInt32",&vr::IVRSettings::SetInt32,policies<>(),"(self pchSettingsKey nValue peError)")
.def("SetFloat",&vr::IVRSettings::SetFloat,policies<>(),"(self pchSettingsKey flValue peError)")
.def("SetString",&vr::IVRSettings::SetString,policies<>(),"(self pchSettingsKey pchValue peError)")
.def("GetBool",&vr::IVRSettings::GetBool,policies<>(),"(self pchSettingsKey peError)")
.def("GetInt32",&vr::IVRSettings::GetInt32,policies<>(),"(self pchSettingsKey peError)")
.def("GetFloat",&vr::IVRSettings::GetFloat,policies<>(),"(self pchSettingsKey peError)")
.def("GetString",&vr::IVRSettings::GetString,policies<>(),"(self pchSettingsKey pchValue unValueLen peError)")
.def("RemoveSection",&vr::IVRSettings::RemoveSection,policies<>(),"(self peError)")
.def("RemoveKeyInSection",&vr::IVRSettings::RemoveKeyInSection,policies<>(),"(self pchSettingsKey peError)")
,class_<vr::IVRScreenshots>("vr::IVRScreenshots",no_default_constructor)
.def("RequestScreenshot",&vr::IVRScreenshots::RequestScreenshot,policies<>(),"(self type pchPreviewFilename pchVRFilename)")
.def("HookScreenshot",&vr::IVRScreenshots::HookScreenshot,policies<>(),"(self numTypes)")
.def("GetScreenshotPropertyType",&vr::IVRScreenshots::GetScreenshotPropertyType,policies<>(),"(self pError)")
.def("GetScreenshotPropertyFilename",&vr::IVRScreenshots::GetScreenshotPropertyFilename,policies<>(),"(self filenameType pchFilename cchFilename pError)")
.def("UpdateScreenshotProgress",&vr::IVRScreenshots::UpdateScreenshotProgress,policies<>(),"(self flProgress)")
.def("TakeStereoScreenshot",&vr::IVRScreenshots::TakeStereoScreenshot,policies<>(),"(self pchPreviewFilename pchVRFilename)")
.def("SubmitScreenshot",&vr::IVRScreenshots::SubmitScreenshot,policies<>(),"(self type pchSourcePreviewFilename pchSourceVRFilename)")
,class_<vr::IVRResources>("vr::IVRResources",no_default_constructor)
.def("LoadSharedResource",&vr::IVRResources::LoadSharedResource,policies<>(),"(self pchBuffer unBufferLen)")
.def("GetResourceFullPath",&vr::IVRResources::GetResourceFullPath,policies<>(),"(self pchResourceTypeDirectory pchPathBuffer unBufferLen)")
,class_<vr::IVRDriverManager>("vr::IVRDriverManager",no_default_constructor)
.def("GetDriverCount",&vr::IVRDriverManager::GetDriverCount,policies<>(),"(self )")
.def("GetDriverName",&vr::IVRDriverManager::GetDriverName,policies<>(),"(self pchValue unBufferSize)")
.def("GetDriverHandle",&vr::IVRDriverManager::GetDriverHandle,policies<>(),"(self )")
,class_<vr::IVRInput>("vr::IVRInput",no_default_constructor)
.def("SetActionManifestPath",&vr::IVRInput::SetActionManifestPath,policies<>(),"(self )")
.def("GetActionSetHandle",&vr::IVRInput::GetActionSetHandle,policies<>(),"(self pHandle)")
.def("GetActionHandle",&vr::IVRInput::GetActionHandle,policies<>(),"(self pHandle)")
.def("GetInputSourceHandle",&vr::IVRInput::GetInputSourceHandle,policies<>(),"(self pHandle)")
.def("UpdateActionState",&vr::IVRInput::UpdateActionState,policies<>(),"(self unSizeOfVRSelectedActionSet_t unSetCount)")
.def("GetDigitalActionData",&vr::IVRInput::GetDigitalActionData,policies<>(),"(self pActionData unActionDataSize ulRestrictToDevice)")
.def("GetAnalogActionData",&vr::IVRInput::GetAnalogActionData,policies<>(),"(self pActionData unActionDataSize ulRestrictToDevice)")
.def("GetPoseActionData",&vr::IVRInput::GetPoseActionData,policies<>(),"(self eOrigin fPredictedSecondsFromNow pActionData unActionDataSize ulRestrictToDevice)")
.def("GetSkeletalActionData",&vr::IVRInput::GetSkeletalActionData,policies<>(),"(self pActionData unActionDataSize)")
.def("GetBoneCount",&vr::IVRInput::GetBoneCount,policies<>(),"(self pBoneCount)")
.def("GetBoneHierarchy",&vr::IVRInput::GetBoneHierarchy,policies<>(),"(self pParentIndices unIndexArayCount)")
.def("GetBoneName",&vr::IVRInput::GetBoneName,policies<>(),"(self nBoneIndex pchBoneName unNameBufferSize)")
.def("GetSkeletalReferenceTransforms",&vr::IVRInput::GetSkeletalReferenceTransforms,policies<>(),"(self eTransformSpace eReferencePose pTransformArray unTransformArrayCount)")
.def("GetSkeletalTrackingLevel",&vr::IVRInput::GetSkeletalTrackingLevel,policies<>(),"(self pSkeletalTrackingLevel)")
.def("GetSkeletalBoneData",&vr::IVRInput::GetSkeletalBoneData,policies<>(),"(self eTransformSpace eMotionRange pTransformArray unTransformArrayCount)")
.def("GetSkeletalSummaryData",&vr::IVRInput::GetSkeletalSummaryData,policies<>(),"(self pSkeletalSummaryData)")
.def("GetSkeletalBoneDataCompressed",&vr::IVRInput::GetSkeletalBoneDataCompressed,policies<>(),"(self eMotionRange pvCompressedData unCompressedSize punRequiredCompressedSize)")
.def("DecompressSkeletalBoneData",&vr::IVRInput::DecompressSkeletalBoneData,policies<>(),"(self unCompressedBufferSize eTransformSpace pTransformArray unTransformArrayCount)")
.def("TriggerHapticVibrationAction",&vr::IVRInput::TriggerHapticVibrationAction,policies<>(),"(self fStartSecondsFromNow fDurationSeconds fFrequency fAmplitude ulRestrictToDevice)")
.def("GetActionOrigins",&vr::IVRInput::GetActionOrigins,policies<>(),"(self digitalActionHandle originsOut originOutCount)")
.def("GetOriginLocalizedName",&vr::IVRInput::GetOriginLocalizedName,policies<>(),"(self pchNameArray unNameArraySize unStringSectionsToInclude)")
.def("GetOriginTrackedDeviceInfo",&vr::IVRInput::GetOriginTrackedDeviceInfo,policies<>(),"(self pOriginInfo unOriginInfoSize)")
.def("ShowActionOrigins",&vr::IVRInput::ShowActionOrigins,policies<>(),"(self ulActionHandle)")
.def("ShowBindingsForActionSet",&vr::IVRInput::ShowBindingsForActionSet,policies<>(),"(self unSizeOfVRSelectedActionSet_t unSetCount originToHighlight)")
,class_<vr::IVRIOBuffer>("vr::IVRIOBuffer",no_default_constructor)
.def("Open",&vr::IVRIOBuffer::Open,policies<>(),"(self mode unElementSize unElements pulBuffer)")
.def("Close",&vr::IVRIOBuffer::Close,policies<>(),"(self )")
.def("Read",&vr::IVRIOBuffer::Read,policies<>(),"(self pDst unBytes punRead)")
.def("Write",&vr::IVRIOBuffer::Write,policies<>(),"(self pSrc unBytes)")
.def("PropertyContainer",&vr::IVRIOBuffer::PropertyContainer,policies<>(),"(self )")
.def("HasReaders",&vr::IVRIOBuffer::HasReaders,policies<>(),"(self )")
,class_<vr::IVRSpatialAnchors>("vr::IVRSpatialAnchors",no_default_constructor)
.def("CreateSpatialAnchorFromDescriptor",&vr::IVRSpatialAnchors::CreateSpatialAnchorFromDescriptor,policies<>(),"(self pHandleOut)")
.def("CreateSpatialAnchorFromPose",&vr::IVRSpatialAnchors::CreateSpatialAnchorFromPose,policies<>(),"(self eOrigin pPose pHandleOut)")
.def("GetSpatialAnchorPose",&vr::IVRSpatialAnchors::GetSpatialAnchorPose,policies<>(),"(self eOrigin pPoseOut)")
.def("GetSpatialAnchorDescriptor",&vr::IVRSpatialAnchors::GetSpatialAnchorDescriptor,policies<>(),"(self pchDescriptorOut punDescriptorBufferLenInOut)")
]; 
};



CLASP_REGISTER_STARTUP(startup)



// end of file
